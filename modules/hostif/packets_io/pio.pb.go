//
// Copyright 2017 Nippon Telegraph and Telephone Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go.
// source: pio.proto
// DO NOT EDIT!

/*
Package packets_io is a generated protocol buffer package.

It is generated from these files:
	pio.proto

It has these top-level messages:
	Packet
	BulkPackets
	Result
	Null
*/
package packets_io

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Packet struct {
	Subifname string `protobuf:"bytes,1,opt,name=subifname" json:"subifname,omitempty"`
	Len       uint32 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	Data      []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Packet) Reset()                    { *m = Packet{} }
func (m *Packet) String() string            { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()               {}
func (*Packet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Packet) GetSubifname() string {
	if m != nil {
		return m.Subifname
	}
	return ""
}

func (m *Packet) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *Packet) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type BulkPackets struct {
	N       int64     `protobuf:"varint,1,opt,name=n" json:"n,omitempty"`
	Packets []*Packet `protobuf:"bytes,2,rep,name=packets" json:"packets,omitempty"`
}

func (m *BulkPackets) Reset()                    { *m = BulkPackets{} }
func (m *BulkPackets) String() string            { return proto.CompactTextString(m) }
func (*BulkPackets) ProtoMessage()               {}
func (*BulkPackets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BulkPackets) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *BulkPackets) GetPackets() []*Packet {
	if m != nil {
		return m.Packets
	}
	return nil
}

type Result struct {
	R int64 `protobuf:"varint,1,opt,name=r" json:"r,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Result) GetR() int64 {
	if m != nil {
		return m.R
	}
	return 0
}

type Null struct {
}

func (m *Null) Reset()                    { *m = Null{} }
func (m *Null) String() string            { return proto.CompactTextString(m) }
func (*Null) ProtoMessage()               {}
func (*Null) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Packet)(nil), "packets_io.packet")
	proto.RegisterType((*BulkPackets)(nil), "packets_io.bulk_packets")
	proto.RegisterType((*Result)(nil), "packets_io.result")
	proto.RegisterType((*Null)(nil), "packets_io.null")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PacketsIo service

type PacketsIoClient interface {
	SendBulk(ctx context.Context, in *BulkPackets, opts ...grpc.CallOption) (*Result, error)
	RecvBulk(ctx context.Context, in *Null, opts ...grpc.CallOption) (*BulkPackets, error)
}

type packetsIoClient struct {
	cc *grpc.ClientConn
}

func NewPacketsIoClient(cc *grpc.ClientConn) PacketsIoClient {
	return &packetsIoClient{cc}
}

func (c *packetsIoClient) SendBulk(ctx context.Context, in *BulkPackets, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/packets_io.packets_io/send_bulk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packetsIoClient) RecvBulk(ctx context.Context, in *Null, opts ...grpc.CallOption) (*BulkPackets, error) {
	out := new(BulkPackets)
	err := grpc.Invoke(ctx, "/packets_io.packets_io/recv_bulk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PacketsIo service

type PacketsIoServer interface {
	SendBulk(context.Context, *BulkPackets) (*Result, error)
	RecvBulk(context.Context, *Null) (*BulkPackets, error)
}

func RegisterPacketsIoServer(s *grpc.Server, srv PacketsIoServer) {
	s.RegisterService(&_PacketsIo_serviceDesc, srv)
}

func _PacketsIo_SendBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkPackets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketsIoServer).SendBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets_io.packets_io/SendBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketsIoServer).SendBulk(ctx, req.(*BulkPackets))
	}
	return interceptor(ctx, in, info, handler)
}

func _PacketsIo_RecvBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketsIoServer).RecvBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets_io.packets_io/RecvBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketsIoServer).RecvBulk(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

var _PacketsIo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "packets_io.packets_io",
	HandlerType: (*PacketsIoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "send_bulk",
			Handler:    _PacketsIo_SendBulk_Handler,
		},
		{
			MethodName: "recv_bulk",
			Handler:    _PacketsIo_RecvBulk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pio.proto",
}

func init() { proto.RegisterFile("pio.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xbd, 0x6e, 0xc3, 0x20,
	0x14, 0x85, 0x43, 0x1c, 0xb9, 0xe2, 0xd6, 0x95, 0xa2, 0x3b, 0x54, 0x28, 0xea, 0x60, 0x31, 0x31,
	0x54, 0x19, 0xd2, 0xa9, 0xea, 0x1b, 0x54, 0x9d, 0x78, 0x01, 0x0b, 0x27, 0x54, 0xb2, 0x42, 0xc1,
	0xe2, 0xa7, 0x4f, 0xd0, 0x07, 0xaf, 0xb0, 0x1d, 0x99, 0x0e, 0xdd, 0x0e, 0x70, 0xf9, 0xbe, 0x03,
	0x40, 0xc7, 0xc1, 0x1d, 0x47, 0xef, 0xa2, 0x43, 0x18, 0xd5, 0xf9, 0xaa, 0x63, 0xe8, 0x06, 0xc7,
	0x3f, 0xa0, 0x9e, 0x57, 0xf8, 0x04, 0x34, 0xa4, 0x7e, 0xf8, 0xb4, 0xea, 0x4b, 0x33, 0xd2, 0x12,
	0x41, 0xe5, 0xba, 0x81, 0x7b, 0xa8, 0x8c, 0xb6, 0x6c, 0xdb, 0x12, 0xf1, 0x20, 0x73, 0x44, 0x84,
	0xdd, 0x45, 0x45, 0xc5, 0xaa, 0x96, 0x88, 0x46, 0x4e, 0x99, 0xbf, 0x43, 0xd3, 0x27, 0x73, 0xed,
	0x16, 0x01, 0x36, 0x40, 0xec, 0xc4, 0xaa, 0x24, 0xb1, 0xf8, 0x0c, 0x77, 0xcb, 0x01, 0xdb, 0xb6,
	0x95, 0xb8, 0x3f, 0xe1, 0x71, 0x6d, 0xb2, 0x44, 0x79, 0x1b, 0xe1, 0x8f, 0x50, 0x7b, 0x1d, 0x92,
	0x89, 0x99, 0xe2, 0x6f, 0x14, 0xcf, 0x6b, 0xd8, 0xd9, 0x64, 0xcc, 0xe9, 0x87, 0x40, 0xf1, 0x10,
	0x7c, 0x03, 0x1a, 0xb4, 0xbd, 0x74, 0xd9, 0x8f, 0xac, 0x04, 0x97, 0x8d, 0x0e, 0x7f, 0x94, 0x33,
	0x9f, 0x6f, 0xf0, 0x15, 0xa8, 0xd7, 0xe7, 0xef, 0xf9, 0xf2, 0xbe, 0x1c, 0xc9, 0xaa, 0xc3, 0xbf,
	0x38, 0xbe, 0xe9, 0xeb, 0xe9, 0x4f, 0x5f, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x89, 0x7b,
	0x79, 0x60, 0x01, 0x00, 0x00,
}
